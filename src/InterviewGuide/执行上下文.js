/*
 *@description:
 * @author wayne
 * @date 2022-11-09 08:53
*/

// 一段代码被执行时会经历两个阶段：编译，执行。
// 在编译时，一个执行上下文被创建。当执行上下文就绪时，执行阶段就开始了，所有的可执行代码被一行一行的执行。


//执行上下文：当前执行环境中的变量，函数声明，作用域链，this等信息组成。
//分为全局执行上下文和函数执行上下文。其区别在于全局执行上下文只有一个（编译阶段创建），函数执行上下文在函数每次调用时会创建一个新的函数执行上下文。


//作用域指的是变量的可访问性或者可见性。也就是说程序的哪些部分可以访问到变量或者说变量在哪是可见的。
//作用域链：当在 JavaScript 中使用一个变量时，JavaScript 引擎将会尝试在当前的作用域中查询该变量的值。
//如果查找不到，它就会在外部作用域中继续查找，直到查找到该变量或者到达全局作用域。

//全局作用域，局部作用域（函数作用域），块级作用域。
// 块作用域中的 let 和 const 变量在执行阶段而不是编译阶段被创建。
// let 和 const 变量被存在在词法环境中。
// 多个块作用域在词法环境中以栈的结构来维护。
// 当 JavaScript 引擎执行完块作用域中的所有代码时，相关的 let 和 const 变量将会被删除。



// outer 定义了变量的查找链，又称作用域链。
// 作用域链在编译阶段确定，而不是执行阶段。因此，发生在执行阶段的函数调用并不会影响作用域链。
// 闭包的出现是因为词法作用域规则——内部函数可以范围外部函数中的变量。持有变量引用的函数独占该变量。
// this 不是作用域的概念。谁调用这个函数（或者方法），谁就是 this。